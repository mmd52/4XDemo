colnames(IssueCostMatrix)<-ColumnNames
IssueCostMatrix[is.na(IssueCostMatrix)] <- 0
write.csv(IssueCostMatrix,"CustomerRelatedIssueCostMatrix.csv")
rm(list=ls())
library(shiny); runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
dat$Product_Line
unique(dat$Product_Line)
unique(dat$Product_Type)
runApp('Shiny_Framework.R')
rm(list=ls())
source("D:/MDS/4XDemo/4X/Initial/Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[
(dat$Cost_of_Goods_Sold_EURO>20)&
(dat$Cost_of_Goods_Sold_EURO<1000000)&
(dat$Customer_related_Issues_Costs<200000)&
(dat$Total_Cost_of_Distribution>10)&
(dat$Total_Cost_of_Distribution<200000)&
(dat$Total_Customer_Order_Management_Costs>10)&
(dat$Total_Customer_Order_Management_Costs<100000)&
(dat$Total_Operations_Costs>10)&
(dat$Total_Operations_Costs<500000),]
summary(ndat)
View(head(ndat))
colnames(ndat)
runApp('Shiny_Framework.R')
col<-c("Plant","Quantity_units","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","N_Parts",
"Assembly_Labour_Minutes","Machinery_Minutes","Number_of_Deliveries",
"Customer_Class","Turnover_Range_EURO","Geographical_Area")
finalData<-subset(ndat,col)
finalData<-subset(ndat,select=col)
write.csv(finalData,"4X_model.csv")
rm(list=ls())
rm(list=ls())
source("D:/MDS/4XDemo/4X/Initial/Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[
(dat$Cost_of_Goods_Sold_EURO>20)&
(dat$Cost_of_Goods_Sold_EURO<1000000)&
(dat$Customer_related_Issues_Costs<200000)&
(dat$Total_Cost_of_Distribution>10)&
(dat$Total_Cost_of_Distribution<200000)&
(dat$Total_Customer_Order_Management_Costs>10)&
(dat$Total_Customer_Order_Management_Costs<100000)&
(dat$Total_Operations_Costs>10)&
(dat$Total_Operations_Costs<500000),]
summary(ndat)
col<-c("Plant","Quantity_units","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","N_Parts",
"Assembly_Labour_Minutes","Machinery_Minutes","Number_of_Deliveries",
"Customer_Class","Turnover_Range_EURO","Geographical_Area")
finalData<-subset(ndat,select=col)
Summary(finalData)
summary(finalData)
plot(finalData$Cost_of_Goods_Sold_EURO~finalData$Total_Cost_of_Distribution)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Total_Cost_of_Distribution)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Total_Customer_Order_Management_Costs)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Customer_related_Issues_Costs)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Total_Operations_Costs)
rm(list=ls())
rm(list=ls)
rm(list=ls())
library(shiny); runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
source("Libraries.R")
#Author @ Mohammed 06/05/2018
#Code used to Fetch/install/Load all libraries required
rm(list=ls())
print("============== Beginning to load libraries  ===================")
setwd("D:/MDS/4XDemo/4X")
#Function To check if
checkInstallLoad <- function(libName)
{
if(!require(libName, character.only=TRUE))
{
install.packages(libName)
require(libName, character.only=TRUE)
}
}
checkInstallLoad("data.table")
checkInstallLoad("Matrix")
checkInstallLoad("Metrics")
checkInstallLoad("stringr")
checkInstallLoad("lubridate")
checkInstallLoad("ggplot2")
checkInstallLoad("pROC")
checkInstallLoad("caret")
checkInstallLoad("caretEnsemble")
checkInstallLoad("e1071")
checkInstallLoad("randomForest")
checkInstallLoad("xgboost")
checkInstallLoad("rpart")
checkInstallLoad("C50")
checkInstallLoad("adabag")
checkInstallLoad("arules")
checkInstallLoad("ROCR")
checkInstallLoad("nnet")
checkInstallLoad("car")
checkInstallLoad("Ckmeans.1d.dp")
checkInstallLoad("psych")
rm(checkInstallLoad)
print("============== Completed loading libraries  ===================")
dat<-read.csv(file.choose(),header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
dat<-dat[(dat$Supply_Chain_Management_Costs<=500000)&
(dat$Cost_of_Goods_Sold_EURO<=500000)&
(dat$Total_Operations_Costs<=500000),]
counts <- table(dat$Customer_Class, dat$Geographical_Area)
barplot(counts, main="Car Distribution by1 Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
set.seed(112)
data=matrix(c(10,30,20) , nrow=3)
colnames(data)=c("Cost")
rownames(data)=c("TCD","COM","OC")
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=T)
barplot(data, col=colors()[c(23,89,12)] , border="white", font.axis=2, legend=rownames(data),
horiz=TRUE, font.lab=2)
qplot(x = Cost, y = c(10,20,30), data = data, geom = "bar", fill = variable)
data=matrix(c(c(10,20,30),c(30,40,50)) , nrow=3)
colnames(data)=c("Cost")
data
colnames(data)=c("Cost1","cost2")
rownames(data)=c("TCD","COM","OC")
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=T)
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=F)
barplot(data, col=colors()[c(23,89,12)] , border="white", font.axis=2, legend=rownames(data),
horiz=TRUE, font.lab=2)
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=F)
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
rm(list=ls())
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[(dat$Supply_Chain_Management_Costs<=500000)&
(dat$Cost_of_Goods_Sold_EURO<=500000)&
(dat$Total_Operations_Costs<=500000),]
col<-c("Plant","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Product_Line","Product_Type","Customer_Class","Turnover_Range_EURO","Geographical_Area")
smlr_Model_TCD <- lm(Total_Cost_of_Distribution~.,data=subset(ndat, select=col))
summary(smlr_Model_TCD)
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
library(shiny); runApp('Shiny_Framework.R')
source("Libraries.R")
#Author @ Mohammed 06/05/2018
#Code used to Fetch/install/Load all libraries required
rm(list=ls())
print("============== Beginning to load libraries  ===================")
setwd("D:/MDS/4XDemo/4X")
#Function To check if
checkInstallLoad <- function(libName)
{
if(!require(libName, character.only=TRUE))
{
install.packages(libName)
require(libName, character.only=TRUE)
}
}
checkInstallLoad("data.table")
checkInstallLoad("Matrix")
checkInstallLoad("Metrics")
checkInstallLoad("stringr")
checkInstallLoad("lubridate")
checkInstallLoad("ggplot2")
checkInstallLoad("pROC")
checkInstallLoad("caret")
checkInstallLoad("caretEnsemble")
checkInstallLoad("e1071")
checkInstallLoad("randomForest")
checkInstallLoad("xgboost")
checkInstallLoad("rpart")
checkInstallLoad("C50")
checkInstallLoad("adabag")
checkInstallLoad("arules")
checkInstallLoad("ROCR")
checkInstallLoad("nnet")
checkInstallLoad("car")
checkInstallLoad("Ckmeans.1d.dp")
checkInstallLoad("psych")
rm(checkInstallLoad)
print("============== Completed loading libraries  ===================")
dat<-read.csv('4Xdata.csv',header=TRUE)
head(dat)
dat<-dat[,-1]
Summary(dat)
summary(dat)
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[(dat$Cost_of_Goods_Sold_EURO<200000)&
(dat$Cost_of_Goods_Sold_EURO>0)&
(dat$Total_Cost_of_Distribution<150000)&
(dat$Total_Cost_of_Distribution>0),]
ndat<-dat[(dat$Cost_of_Goods_Sold_EURO<200000)&
(dat$Cost_of_Goods_Sold_EURO>0)&
(dat$Total_Cost_of_Distribution<150000)&
(dat$Total_Cost_of_Distribution>0)&
(dat$Total_Customer_Order_Management_Costs<150000)&
(dat$Total_Customer_Order_Management_Costs>0)&
(dat$Total_Operations_Costs<500000)&
(dat$Total_Operations_Costs>0)&
,]
ndat<-dat[(dat$Cost_of_Goods_Sold_EURO<200000)&
(dat$Cost_of_Goods_Sold_EURO>0)&
(dat$Total_Cost_of_Distribution<150000)&
(dat$Total_Cost_of_Distribution>0)&
(dat$Total_Customer_Order_Management_Costs<150000)&
(dat$Total_Customer_Order_Management_Costs>0)&
(dat$Total_Operations_Costs<500000)&
(dat$Total_Operations_Costs>0)
,]
col<-c("Cost_of_Goods_Sold_EURO",
"Quantity_units","Number_of_Deliveries","N_Parts",
"Assembly_Labour_Minutes","Machinery_Minutes","Geographical_Area","Plant",
"Customer_Class","Turnover_Range_EURO","Product_Line","Product_Type",
"Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs",
"Customer_related_Issues_Costs",
"Total_Operations_Costs")
ndat<-subset(ndat, select=col)
write.csv(ndat,"4X_ShinyBoy.csv")
rm(list=ls())
dat<-read.csv('4X_ShinyBoy.csv',header=TRUE)
View(head(dat))
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[(dat$Cost_of_Goods_Sold_EURO<200000)&
(dat$Cost_of_Goods_Sold_EURO>0)&
(dat$Total_Cost_of_Distribution<150000)&
(dat$Total_Cost_of_Distribution>0)&
(dat$Total_Customer_Order_Management_Costs<150000)&
(dat$Total_Customer_Order_Management_Costs>0)&
(dat$Total_Operations_Costs<500000)&
(dat$Total_Operations_Costs>0)
,]
col<-c("Cost_of_Goods_Sold_EURO",
"Quantity_units","Number_of_Deliveries","N_Parts",
"Assembly_Labour_Minutes","Machinery_Minutes","Geographical_Area","Plant",
"Customer_Class","Turnover_Range_EURO","Product_Line","Product_Type",
"Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs",
"Customer_related_Issues_Costs",
"Total_Operations_Costs")
ndat<-subset(ndat, select=col)
write.csv(ndat,"4X_ShinyBoy.csv",row.names=FALSE)
dat<-read.csv('4X_ShinyBoy.csv',header=TRUE)
View(head(dat))
rm(list=ls())
dat<-read.csv('4X_ShinyBoy.csv',header=TRUE)
head(dat)
COD_Model <- lm(Total_Cost_of_Distribution~
Cost_of_Goods_Sold_EURO+Quantity_units+Number_of_Deliveries+
Geographical_Area+Turnover_Range_EURO+Product_Type,data=dat)
summary(COD_Model)
Cost_of_Goods_Sold_EURO=c(100)
Quantity_units=c(2)
Number_of_Deliveries=c(4)
Geographical_Area=c("FRA")
Turnover_Range_EURO=c("Strategic")
Product_Line=c("Plugs and Caps")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
COD_Model <- lm(Total_Cost_of_Distribution~
Cost_of_Goods_Sold_EURO+Quantity_units+Number_of_Deliveries+
Geographical_Area+Turnover_Range_EURO+Product_Line,data=dat)
summary(COD_Model)
predict(COD_Model,df)
Cost_of_Goods_Sold_EURO=c(50)
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
Cost_of_Goods_Sold_EURO=c(1000)
Quantity_units=c(2)
Number_of_Deliveries=c(4)
Geographical_Area=c("FRA")
Turnover_Range_EURO=c("Strategic")
Product_Line=c("Plugs and Caps")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
Geographical_Area=c("ITA")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
Cost_of_Goods_Sold_EURO=c(10000)
Quantity_units=c(2)
Number_of_Deliveries=c(4)
Geographical_Area=c("ITA")
Turnover_Range_EURO=c("Strategic")
Product_Line=c("Plugs and Caps")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
rm(list=ls())
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[(dat$Cost_of_Goods_Sold_EURO<200000)&
(dat$Cost_of_Goods_Sold_EURO>20)&
(dat$Total_Cost_of_Distribution<150000)&
(dat$Total_Cost_of_Distribution>10)&
(dat$Total_Customer_Order_Management_Costs<150000)&
(dat$Total_Customer_Order_Management_Costs>10)&
(dat$Total_Operations_Costs<500000)&
(dat$Total_Operations_Costs>10)
,]
col<-c("Cost_of_Goods_Sold_EURO",
"Quantity_units","Number_of_Deliveries","N_Parts",
"Assembly_Labour_Minutes","Machinery_Minutes","Geographical_Area","Plant",
"Customer_Class","Turnover_Range_EURO","Product_Line","Product_Type",
"Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs",
"Customer_related_Issues_Costs",
"Total_Operations_Costs")
ndat<-subset(ndat, select=col)
write.csv(ndat,"4X_ShinyBoy.csv",row.names=FALSE)
dat<-read.csv('4X_ShinyBoy.csv',header=TRUE)
View(head(dat))
rm(list=ls())
dat<-read.csv('4X_ShinyBoy.csv',header=TRUE)
COD_Model <- lm(Total_Cost_of_Distribution~
Cost_of_Goods_Sold_EURO+Quantity_units+Number_of_Deliveries+
Geographical_Area+Turnover_Range_EURO+Product_Line,data=dat)
summary(COD_Model)
Cost_of_Goods_Sold_EURO=c(10000)
Quantity_units=c(2)
Number_of_Deliveries=c(4)
Geographical_Area=c("ITA")
Turnover_Range_EURO=c("Strategic")
Product_Line=c("Plugs and Caps")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
Cost_of_Goods_Sold_EURO=c(10)
Quantity_units=c(2)
Number_of_Deliveries=c(4)
Geographical_Area=c("ITA")
Turnover_Range_EURO=c("Strategic")
Product_Line=c("Plugs and Caps")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
Cost_of_Goods_Sold_EURO=c(100)
Quantity_units=c(2)
Number_of_Deliveries=c(4)
Geographical_Area=c("ITA")
Turnover_Range_EURO=c("Strategic")
Product_Line=c("Plugs and Caps")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
Product_Line=c("Springs")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
Cost_of_Goods_Sold_EURO=c(10000)
Quantity_units=c(2)
Number_of_Deliveries=c(4)
Geographical_Area=c("ITA")
Turnover_Range_EURO=c("Strategic")
Product_Line=c("Springs")
df = data.frame(Cost_of_Goods_Sold_EURO,Quantity_units,Number_of_Deliveries,
Geographical_Area,Turnover_Range_EURO,Product_Line)
df
predict(COD_Model,df)
head(dat)
COM_Model <- lm(Total_Customer_Order_Management_Costs~
Cost_of_Goods_Sold_EURO+Quantity_units+Number_of_Deliveries+
Geographical_Area+Turnover_Range_EURO+Product_Line,data=dat)
summary(COM_Model)
predict(COM_Model,df)
OC_Model <- lm(Total_Operations_Costs~
Cost_of_Goods_Sold_EURO+Quantity_units+Number_of_Deliveries+
Geographical_Area+Turnover_Range_EURO+Product_Line,data=dat)
summary(OC_Model)
predict(OC_Model,df)
RowNames<-unique(dat$Geographical_Area)
ColumnNames<-unique(dat$Product_Line)
tab<-matrix(nrow = 11,ncol = 17)
i=1
j=1
for (row in RowNames)
{
for (column in ColumnNames)
{
tab[i,j] <- mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
j=1
}
tab
IssueCostMatrix<-data.frame(row.names = RowNames,tab)
colnames(IssueCostMatrix)<-ColumnNames
IssueCostMatrix[is.na(IssueCostMatrix)] <- 0
IssueCostMatrix
IssueCostMatrix["CEU",]
IssueCostMatrix["CEU","Springs"]
IssueCostMatrix[Geographical_Area,Product_Line]
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rsconnect::setAccountInfo(name='mohammedtopiwalla',
token='080A67059629510A9357C6F9B0825017',
secret='<SECRET>')
library(rsconnect)
if(!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='mohammedtopiwalla',
token='080A67059629510A9357C6F9B0825017',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mohammedtopiwalla',
token='080A67059629510A9357C6F9B0825017',
secret='HFpYDP758E2rLa+akLsJhZvDWw06ezV3oidUw4FK')
deployApp()
rsconnect::setAccountInfo(name='mohammedtopiwalla',
token='080A67059629510A9357C6F9B0825017',
secret='HFpYDP758E2rLa+akLsJhZvDWw06ezV3oidUw4FK')
deployApp()
rm(list=ls())
library(rsconnect)
rsconnect::setAccountInfo(name='mohammedtopiwalla',
token='080A67059629510A9357C6F9B0825017',
secret='HFpYDP758E2rLa+akLsJhZvDWw06ezV3oidUw4FK')
deployApp()
rm(list=ls())
setwd("D:/MDS/4XDemo/4X/Deployment")
library(rsconnect)
rsconnect::setAccountInfo(name='mohammedtopiwalla',
token='080A67059629510A9357C6F9B0825017',
secret='HFpYDP758E2rLa+akLsJhZvDWw06ezV3oidUw4FK')
deployApp()
shinyapps::deployApp("D:/MDS/4XDemo/4X/Deployment")
shinyapps::deployApp("D:/MDS/4XDemo/4X/Deployment/")
runApp('Shiny_Framework.R')
deployApp()
library(rsconnect)
deployApp()
setwd("D:/MDS/4XDemo/4X/Deployment")
shinyapps::deployApp("D:/MDS/4XDemo/4X/Deployment/Shiny_Framework.R")
rm(list=ls())
