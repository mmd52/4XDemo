summary(smlr_Model_1)
ncol<-c("Cost_of_Goods_Sold_EURO","Product_Type")
predValues<-predict(smlr_Model_1,subset(testing_data,select=ncol))
a<-cbind(predValues,testing_data)
summary(a)
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line")
rm(list=ls())
source("Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[(dat$Cost_of_Goods_Sold_EURO<200000)&
(dat$Cost_of_Goods_Sold_EURO>0)&
(dat$Total_Cost_of_Distribution<150000)&
(dat$Total_Cost_of_Distribution>0),]
CDdat<-subset(dat, select=col)
set.seed(999)
source("Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
set.seed(999)
train<-sample(1:nrow(CDdat),round(nrow(CDdat)*0.8,0),replace = F)
training_data<-CDdat[train,]
testing_data<-CDdat[-train,]
rm(train)
smlr_Model_1 <- lm(Total_Cost_of_Distribution~.,data=training_data)
summary(smlr_Model_1)
ncol<-c("Cost_of_Goods_Sold_EURO","Product_Line")
predValues<-predict(smlr_Model_1,subset(testing_data,select=ncol))
a<-cbind(predValues,testing_data)
summary(a)
write.csv(a,"a.csv")
rm(list=ls())
source("Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line","Product_Type")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
rm(dat,ndat)
set.seed(999)
#Splitting data into training and testing
train<-sample(1:nrow(CDdat),round(nrow(CDdat)*0.8,0),replace = F)
training_data<-CDdat[train,]
testing_data<-CDdat[-train,]
rm(train)
smlr_Model_1 <- lm(Total_Cost_of_Distribution~.,data=training_data)
summary(smlr_Model_1)
ncol<-c("Cost_of_Goods_Sold_EURO","Product_Line","Product_Type")
predValues<-predict(smlr_Model_1,subset(testing_data,select=ncol))
a<-cbind(predValues,testing_data)
summary(a)
source("Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
View(head(dat))
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line","Geographical_Area")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
set.seed(999)
train<-sample(1:nrow(CDdat),round(nrow(CDdat)*0.8,0),replace = F)
training_data<-CDdat[train,]
testing_data<-CDdat[-train,]
rm(train)
smlr_Model_1 <- lm(Total_Cost_of_Distribution~.,data=training_data)
summary(smlr_Model_1)
ncol<-c("Cost_of_Goods_Sold_EURO","Product_Line","Geographical_Area")
predValues<-predict(smlr_Model_1,subset(testing_data,select=ncol))
a<-cbind(predValues,testing_data)
summary(a)
source("Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line","Geographical_Area",
"Quantity_units")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
set.seed(999)
train<-sample(1:nrow(CDdat),round(nrow(CDdat)*0.8,0),replace = F)
training_data<-CDdat[train,]
testing_data<-CDdat[-train,]
rm(train)
smlr_Model_1 <- lm(Total_Cost_of_Distribution~.,data=training_data)
summary(smlr_Model_1)
ncol<-c("Cost_of_Goods_Sold_EURO","Product_Line","Geographical_Area","Quantity_units")
predValues<-predict(smlr_Model_1,subset(testing_data,select=ncol))
a<-cbind(predValues,testing_data)
summary(a)
source("Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line","Geographical_Area",
"Quantity_units","Plant")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
set.seed(999)
train<-sample(1:nrow(CDdat),round(nrow(CDdat)*0.8,0),replace = F)
training_data<-CDdat[train,]
testing_data<-CDdat[-train,]
rm(train)
smlr_Model_1 <- lm(Total_Cost_of_Distribution~.,data=training_data)
summary(smlr_Model_1)
ncol<-c("Cost_of_Goods_Sold_EURO","Product_Line","Geographical_Area","Quantity_units","Plant")
predValues<-predict(smlr_Model_1,subset(testing_data,select=ncol))
a<-cbind(predValues,testing_data)
summary(a)
rm(list=ls())
source("Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line","Geographical_Area",
"Quantity_units","Plant","Turnover_Range_Euro")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
set.seed(999)
train<-sample(1:nrow(CDdat),round(nrow(CDdat)*0.8,0),replace = F)
training_data<-CDdat[train,]
testing_data<-CDdat[-train,]
rm(train)
smlr_Model_1 <- lm(Total_Cost_of_Distribution~.,data=training_data)
training_data<-CDdat[train,]
CDdat<-subset(dat, select=col)
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line","Geographical_Area",
"Quantity_units","Plant","Turnover_Range_Euro")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
col<-c("Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Product_Line","Geographical_Area",
"Quantity_units","Plant","Turnover_Range_EURO")
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
CDdat<-subset(dat, select=col)
rm(dat,ndat)
set.seed(999)
train<-sample(1:nrow(CDdat),round(nrow(CDdat)*0.8,0),replace = F)
training_data<-CDdat[train,]
testing_data<-CDdat[-train,]
rm(train)
smlr_Model_1 <- lm(Total_Cost_of_Distribution~.,data=training_data)
summary(smlr_Model_1)
ncol<-c("Cost_of_Goods_Sold_EURO","Product_Line","Geographical_Area","Quantity_units","Plant",
"Turnover_Range_EURO")
predValues<-predict(smlr_Model_1,subset(testing_data,select=ncol))
a<-cbind(predValues,testing_data)
summary(a)
rm(list=ls())
source("D:\MDS\4XDemo\4X\Initial\Libraries.R")
source("D:/MDS/4XDemo/4X/Initial/Libraries.R")
rm(list=ls())
rm(list=ls())
source("D:/MDS/4XDemo/4X/Initial/Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
unique(dat$Geographical_Area)
rowNames<-unique(dat$Geographical_Area)
RowNames<-unique(dat$Geographical_Area)
rm(rowNames)
ColumnNames<-unique(dat$Product_Line)
data.frame(row.names = RowNames,ColumnNames)
data.frame(row.names = RowNames)
table1<-data.frame(row.names = RowNames)
table1
tab<-matrix(nrow = 11,ncol = 17)
tab
avg(dat$Customer_related_Issues_Costs)
mean(dat$Customer_related_Issues_Costs)
mean(dat$Customer_related_Issues_Costs[dat$Geographical_Area="ITA"])
mean(dat$Customer_related_Issues_Costs[dat$Geographical_Area=="ITA"])
RowNames
ColumnNames
mean(dat$Customer_related_Issues_Costs[(dat$Geographical_Area=="FRA")&(dat$Product_Line=="Cables")])
RowNames
RowNames[1]
i=1
j=1
for row in RowNames
{
for column in ColumnNames
{
tab[i,j] = mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
}
for (row in RowNames)
{
for (column in ColumnNames)
{
tab[i,j] = mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
}
tab[1,1]
tab[1,2]
tab[1,17]
tab[11,17]
tab
tab[0,0]
tab
for (row in RowNames)
{
for (column in ColumnNames)
{
print("Value for row: "+row)
print("Value for Column: "+column)
tab[i,j] = mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
}
for (row in RowNames)
{
for (column in ColumnNames)
{
print("Value for row: ",row)
print("Value for Column: ",column)
tab[i,j] = mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
}
tab<-matrix(nrow = 11,ncol = 17)
i=1
j=1
for (row in RowNames)
{
for (column in ColumnNames)
{
print(mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)]))
tab[i,j] = mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
}
tab
for (row in RowNames)
{
for (column in ColumnNames)
{
print(column)
tab[i,j] = mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
}
RowNames
tab
i=1
j=1
for (row in RowNames)
{
for (column in ColumnNames)
{
tab[i,j] <- mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
j=1
}
tab
RowNames
ColumnNames
mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area=="IAM")
&(dat$Product_Line=="Basic Components")])
IssueCostMatrix<-data.frame(row.names = RowNames,tab)
IssueCostMatrix
colnames(IssueCostMatrix)<-ColumnNames
IssueCostMatrix
IssueCostMatrix[is.nan(IssueCostMatrix)] <- 0
IssueCostMatrix[is.na(IssueCostMatrix)] <- 0
IssueCostMatrix
write.csv(IssueCostMatrix,"CustomerRelatedIsseCostMatrix.csv")
write.csv(IssueCostMatrix,"CustomerRelatedIssu
eCostMatrix.csv")
write.csv(IssueCostMatrix,"CustomerRelatedIssu
eCostMatrix.csv")
source("D:/MDS/4XDemo/4X/Initial/Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
RowNames<-unique(dat$Geographical_Area)
ColumnNames<-unique(dat$Product_Line)
tab<-matrix(nrow = 11,ncol = 17)
i=1
j=1
for (row in RowNames)
{
for (column in ColumnNames)
{
tab[i,j] <- mean (dat$Customer_related_Issues_Costs[(dat$Geographical_Area==row)
&(dat$Product_Line==column)])
j=j+1
}
i=i+1
j=1
}
IssueCostMatrix<-data.frame(row.names = RowNames,tab)
colnames(IssueCostMatrix)<-ColumnNames
IssueCostMatrix[is.na(IssueCostMatrix)] <- 0
write.csv(IssueCostMatrix,"CustomerRelatedIssueCostMatrix.csv")
rm(list=ls())
library(shiny); runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
dat$Product_Line
unique(dat$Product_Line)
unique(dat$Product_Type)
runApp('Shiny_Framework.R')
rm(list=ls())
source("D:/MDS/4XDemo/4X/Initial/Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[
(dat$Cost_of_Goods_Sold_EURO>20)&
(dat$Cost_of_Goods_Sold_EURO<1000000)&
(dat$Customer_related_Issues_Costs<200000)&
(dat$Total_Cost_of_Distribution>10)&
(dat$Total_Cost_of_Distribution<200000)&
(dat$Total_Customer_Order_Management_Costs>10)&
(dat$Total_Customer_Order_Management_Costs<100000)&
(dat$Total_Operations_Costs>10)&
(dat$Total_Operations_Costs<500000),]
summary(ndat)
View(head(ndat))
colnames(ndat)
runApp('Shiny_Framework.R')
col<-c("Plant","Quantity_units","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","N_Parts",
"Assembly_Labour_Minutes","Machinery_Minutes","Number_of_Deliveries",
"Customer_Class","Turnover_Range_EURO","Geographical_Area")
finalData<-subset(ndat,col)
finalData<-subset(ndat,select=col)
write.csv(finalData,"4X_model.csv")
rm(list=ls())
rm(list=ls())
source("D:/MDS/4XDemo/4X/Initial/Libraries.R")
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[
(dat$Cost_of_Goods_Sold_EURO>20)&
(dat$Cost_of_Goods_Sold_EURO<1000000)&
(dat$Customer_related_Issues_Costs<200000)&
(dat$Total_Cost_of_Distribution>10)&
(dat$Total_Cost_of_Distribution<200000)&
(dat$Total_Customer_Order_Management_Costs>10)&
(dat$Total_Customer_Order_Management_Costs<100000)&
(dat$Total_Operations_Costs>10)&
(dat$Total_Operations_Costs<500000),]
summary(ndat)
col<-c("Plant","Quantity_units","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","N_Parts",
"Assembly_Labour_Minutes","Machinery_Minutes","Number_of_Deliveries",
"Customer_Class","Turnover_Range_EURO","Geographical_Area")
finalData<-subset(ndat,select=col)
Summary(finalData)
summary(finalData)
plot(finalData$Cost_of_Goods_Sold_EURO~finalData$Total_Cost_of_Distribution)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Total_Cost_of_Distribution)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Total_Customer_Order_Management_Costs)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Customer_related_Issues_Costs)
plot(finalData$Cost_of_Goods_Sold_EURO,finalData$Total_Operations_Costs)
rm(list=ls())
rm(list=ls)
rm(list=ls())
library(shiny); runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
source("Libraries.R")
#Author @ Mohammed 06/05/2018
#Code used to Fetch/install/Load all libraries required
rm(list=ls())
print("============== Beginning to load libraries  ===================")
setwd("D:/MDS/4XDemo/4X")
#Function To check if
checkInstallLoad <- function(libName)
{
if(!require(libName, character.only=TRUE))
{
install.packages(libName)
require(libName, character.only=TRUE)
}
}
checkInstallLoad("data.table")
checkInstallLoad("Matrix")
checkInstallLoad("Metrics")
checkInstallLoad("stringr")
checkInstallLoad("lubridate")
checkInstallLoad("ggplot2")
checkInstallLoad("pROC")
checkInstallLoad("caret")
checkInstallLoad("caretEnsemble")
checkInstallLoad("e1071")
checkInstallLoad("randomForest")
checkInstallLoad("xgboost")
checkInstallLoad("rpart")
checkInstallLoad("C50")
checkInstallLoad("adabag")
checkInstallLoad("arules")
checkInstallLoad("ROCR")
checkInstallLoad("nnet")
checkInstallLoad("car")
checkInstallLoad("Ckmeans.1d.dp")
checkInstallLoad("psych")
rm(checkInstallLoad)
print("============== Completed loading libraries  ===================")
dat<-read.csv(file.choose(),header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
dat<-dat[(dat$Supply_Chain_Management_Costs<=500000)&
(dat$Cost_of_Goods_Sold_EURO<=500000)&
(dat$Total_Operations_Costs<=500000),]
counts <- table(dat$Customer_Class, dat$Geographical_Area)
barplot(counts, main="Car Distribution by1 Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
set.seed(112)
data=matrix(c(10,30,20) , nrow=3)
colnames(data)=c("Cost")
rownames(data)=c("TCD","COM","OC")
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=T)
barplot(data, col=colors()[c(23,89,12)] , border="white", font.axis=2, legend=rownames(data),
horiz=TRUE, font.lab=2)
qplot(x = Cost, y = c(10,20,30), data = data, geom = "bar", fill = variable)
data=matrix(c(c(10,20,30),c(30,40,50)) , nrow=3)
colnames(data)=c("Cost")
data
colnames(data)=c("Cost1","cost2")
rownames(data)=c("TCD","COM","OC")
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=T)
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=F)
barplot(data, col=colors()[c(23,89,12)] , border="white", font.axis=2, legend=rownames(data),
horiz=TRUE, font.lab=2)
barplot(data, border="white", space=0.04, font.axis=2,
xlab="group",legend=rownames(data),horiz=F)
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
rm(list=ls())
dat<-read.csv('4Xdata.csv',header=TRUE)
dat<-dat[,-1]
dat$Average_Delivery_Batch_Size_units<-as.numeric(dat$Average_Delivery_Batch_Size_units)
dat$Number_of_Deliveries<-as.numeric(dat$Number_of_Deliveries)
ndat<-dat[(dat$Supply_Chain_Management_Costs<=500000)&
(dat$Cost_of_Goods_Sold_EURO<=500000)&
(dat$Total_Operations_Costs<=500000),]
col<-c("Plant","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Product_Line","Product_Type","Customer_Class","Turnover_Range_EURO","Geographical_Area")
smlr_Model_TCD <- lm(Total_Cost_of_Distribution~.,data=subset(ndat, select=col))
summary(smlr_Model_TCD)
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
